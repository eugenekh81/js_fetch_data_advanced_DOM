{"version":3,"sources":["scripts/main.js"],"names":["baseURL","idURL","allPhonesList","getAllPhones","fetch","then","response","json","getAllSuccessfulDetails","data","promises","map","id","Promise","allSettled","getFirstReceived","race","getFirstThree","phones","resolve","reject","phonesDetails","phone","length","push","createNotification","list","type","notification","document","createElement","header","notificationContent","className","toLowerCase","replace","innerText","forEach","insertAdjacentHTML","name","append","body","phoneIds","allSuccessfulDetails","firstReceived","firstThreeReceived","responses","filter","status","value"],"mappings":";AAAA,aAEA,IAAMA,EACJ,wEACIC,EACJ,oEAEIC,EAAgBC,IA+BtB,SAASA,IACAC,OAAAA,MAAMJ,GACVK,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAG/B,SAASC,EAAwBC,GACzBC,IAAAA,EAAWD,EAAKE,IAAI,SAAAC,GACjBR,OAAAA,MAAMH,EAAWW,GAAAA,OAAAA,EAAZ,UACTP,KAAK,SAAAC,GAAYA,OAAAA,EAASC,WAGxBM,OAAAA,QAAQC,WAAWJ,GAG5B,SAASK,EAAiBN,GAClBC,IAAAA,EAAWD,EAAKE,IAAI,SAAAC,GACjBR,OAAAA,MAAMH,EAAWW,GAAAA,OAAAA,EAAZ,UACTP,KAAK,SAAAC,GAAYA,OAAAA,EAASC,WAGxBM,OAAAA,QAAQG,KAAKN,GAGtB,SAASO,EAAcC,GACd,OAAA,IAAIL,QAAQ,SAACM,EAASC,GACrBC,IAAAA,EAAgB,GAEtBH,EAAOP,IAAI,SAAAC,GACTR,MAAMH,EAAWW,GAAAA,OAAAA,EAAZ,UACFP,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAiB,GACAD,EAAcE,OAAS,GACzBF,EAAcG,KAAKF,GAGQ,IAAzBD,EAAcE,QAChBJ,EAAQE,SAOpB,SAASI,EAAmBC,GAAMC,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,iBACjCC,EAAeC,SAASC,cAAc,OACtCC,EAASF,SAASC,cAAc,MAChCE,EAAsBH,SAASC,cAAc,MAEnDF,EAAaK,UAAYN,EAAKO,cAAcC,QAAQ,IAAK,KAEzDJ,EAAOK,UAAYT,EAEnBD,EAAKW,QAAQ,SAAAf,GACXU,EAAoBM,mBAAmB,YAEvBhB,iCAAAA,OAAAA,EAAMiB,KAAmBjB,gBAAAA,OAAAA,EAAMV,GAF/C,4BAOFgB,EAAaY,OAAOT,GACpBH,EAAaY,OAAOR,GACpBH,SAASY,KAAKD,OAAOZ,GA3FvB1B,EACGG,KAAK,SAAAI,GACEiC,IAAAA,EAAWjC,EAAKE,IAAI,SAAAW,GAASA,OAAAA,EAAMV,KAEnC+B,EAAuBnC,EAAwBkC,GAE/CE,EAAgB7B,EAAiB2B,GAEjCG,EAAqB5B,EAAcyB,GAEzCC,EACGtC,KAAK,SAAAyC,GAQJrB,EAP6BqB,EAAUC,OAAO,SAAAzC,GACrCA,MAAoB,cAApBA,EAAS0C,SAIKrC,IAAI,SAAAL,GAAYA,OAAAA,EAAS2C,WAKpDL,EACGvC,KAAK,SAAAiB,GAASG,OAAAA,EAAmB,CAACH,GAAQ,oBAE7CuB,EACGxC,KAAK,SAAAa,GAAUO,OAAAA,EAAmBP,EAAQ","file":"main.9ef84adc.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst baseURL\n= 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst idURL\n= 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\n\nconst allPhonesList = getAllPhones();\n\nallPhonesList\n  .then(data => {\n    const phoneIds = data.map(phone => phone.id);\n\n    const allSuccessfulDetails = getAllSuccessfulDetails(phoneIds);\n\n    const firstReceived = getFirstReceived(phoneIds);\n\n    const firstThreeReceived = getFirstThree(phoneIds);\n\n    allSuccessfulDetails\n      .then(responses => {\n        const successfullResponses = responses.filter(response => {\n          return response.status === 'fulfilled';\n        });\n\n        const successfulDetailsList\n        = successfullResponses.map(response => response.value);\n\n        createNotification(successfulDetailsList);\n      });\n\n    firstReceived\n      .then(phone => createNotification([phone], 'First received'));\n\n    firstThreeReceived\n      .then(phones => createNotification(phones, 'First three'));\n  });\n\nfunction getAllPhones() {\n  return fetch(baseURL)\n    .then(response => response.json());\n}\n\nfunction getAllSuccessfulDetails(data) {\n  const promises = data.map(id => {\n    return fetch(idURL + `${id}.json`)\n      .then(response => response.json());\n  });\n\n  return Promise.allSettled(promises);\n}\n\nfunction getFirstReceived(data) {\n  const promises = data.map(id => {\n    return fetch(idURL + `${id}.json`)\n      .then(response => response.json());\n  });\n\n  return Promise.race(promises);\n}\n\nfunction getFirstThree(phones) {\n  return new Promise((resolve, reject) => {\n    const phonesDetails = [];\n\n    phones.map(id => {\n      fetch(idURL + `${id}.json`)\n        .then(response => response.json())\n        .then(phone => {\n          if (phonesDetails.length < 3) {\n            phonesDetails.push(phone);\n          }\n\n          if (phonesDetails.length === 3) {\n            resolve(phonesDetails);\n          }\n        });\n    });\n  });\n}\n\nfunction createNotification(list, type = 'All successful') {\n  const notification = document.createElement('div');\n  const header = document.createElement('h2');\n  const notificationContent = document.createElement('ul');\n\n  notification.className = type.toLowerCase().replace(' ', '-');\n\n  header.innerText = type;\n\n  list.forEach(phone => {\n    notificationContent.insertAdjacentHTML('beforeend', `\n    <li>\n      Phone name: ${phone.name}, phone ID: ${phone.id}\n      </li>\n      `);\n  });\n\n  notification.append(header);\n  notification.append(notificationContent);\n  document.body.append(notification);\n};\n"]}